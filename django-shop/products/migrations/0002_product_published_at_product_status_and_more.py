# Generated by Django 5.2.6 on 2025-09-25 14:11

import django.core.validators
import django.db.models.deletion
import django.db.models.functions.text
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('products', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='product',
            name='published_at',
            field=models.DateTimeField(blank=True, default=None, null=True),
        ),
        migrations.AddField(
            model_name='product',
            name='status',
            field=models.CharField(choices=[('draft', 'Draft'), ('published', 'Published'), ('archived', 'Archived')], default='draft', max_length=16),
        ),
        migrations.AlterField(
            model_name='product',
            name='name',
            field=models.CharField(max_length=120),
        ),
        migrations.AlterField(
            model_name='product',
            name='price',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AlterField(
            model_name='product',
            name='slug',
            field=models.SlugField(blank=True, max_length=140),
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('slug', models.SlugField(max_length=100)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='children', to='products.category')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='product',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, related_name='products', to='products.category'),
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40)),
                ('slug', models.SlugField(max_length=60)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['slug'], name='tag_slug_idx')],
                'constraints': [models.UniqueConstraint(django.db.models.functions.text.Lower('name'), name='tag_name_ci_unique'), models.UniqueConstraint(django.db.models.functions.text.Lower('slug'), name='tag_slug_ci_unique')],
            },
        ),
        migrations.CreateModel(
            name='ProductTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.PositiveSmallIntegerField(default=1)),
                ('added_at', models.DateTimeField(auto_now_add=True)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.product')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='products.tag')),
            ],
        ),
        migrations.AddField(
            model_name='product',
            name='tags',
            field=models.ManyToManyField(blank=True, related_name='products', through='products.ProductTag', to='products.tag'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['slug'], name='product_slug_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['-created_at'], name='product_created_idx'),
        ),
        migrations.AddIndex(
            model_name='product',
            index=models.Index(fields=['category', '-created_at'], name='product_category_created_idx'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.CheckConstraint(condition=models.Q(('price__gte', 0)), name='product_price_gte_0'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('name'), condition=models.Q(('is_active', True)), name='product_name_ci_unique_active'),
        ),
        migrations.AddConstraint(
            model_name='product',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('slug'), condition=models.Q(('is_active', True)), name='product_slug_ci_unique_active'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['parent', 'slug'], name='cat_parent_slug_idx'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.UniqueConstraint(django.db.models.functions.text.Lower('slug'), models.F('parent'), name='cat_unique_slug_per_parent_ci'),
        ),
        migrations.AddConstraint(
            model_name='category',
            constraint=models.CheckConstraint(condition=models.Q(('parent', models.F('id')), _negated=True), name='cat_no_self_parent'),
        ),
        migrations.AddIndex(
            model_name='producttag',
            index=models.Index(fields=['product', 'tag'], name='product_tag_idx'),
        ),
        migrations.AddIndex(
            model_name='producttag',
            index=models.Index(fields=['tag', 'product'], name='tag_product_idx'),
        ),
        migrations.AddConstraint(
            model_name='producttag',
            constraint=models.UniqueConstraint(fields=('product', 'tag'), name='product_tag_unique'),
        ),
        migrations.AddConstraint(
            model_name='producttag',
            constraint=models.CheckConstraint(condition=models.Q(('weight__gte', 1)), name='producttag_weight_gte_1'),
        ),
    ]
